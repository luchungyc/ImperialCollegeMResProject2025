# Import necessary packages
using Plots, ModelingToolkit, MethodOfLines, OrdinaryDiffEq, DelimitedFiles, DomainSets, Measures, Colors, Trapz, Dates, Random

# This model is based off of the work of Rebecca Boccola, Ruben Perez-Carrasco, Jose Jimenez, and Luc Hung. DO NOT REPRODUCE AND/OR DISTRIBUTE WITHOUT PERMISSION.

# Define variables
@parameters t x  # x is space, t is time

# Define functions of these variables
@variables Pf(..) P1(..) P2(..) M1(..) M2(..) Rf(..) R1(..) R2(..) X1(..) X2(..)

# 1 = rfp module, 2 = gfp module
# Pf = Free polymerase, 
# P1 and P2 = Bound polymerases at the rfp and gfp modules respectively
# M1 and M2 = mRNA produced from the rfp and gfp modules respectively
# Rf = Free ribosomes
# R1 and R2 = RFP and GFP translating complexes respectively
# X1 and X2 = RFP and GFP respectively


# Spatiotemporal parameters
disc = 0.01 # Space step size / dx (µm) / discretization size in x
L::Float64 = 2.0 # Length of the domain (µm) /  cell length
t_end::Float64 = 10^7 # Simulation time (s)

# Partial derivatives (defined symbolically)
∂t = Differential(t)
∂x = Differential(x)
∂xx = Differential(x)^2

# Module locations
x1::Float64 = 1.0 # Location Plasmid 1
x2::Float64 = 1.0 # Location Plasmid 2

# Scaling factor
S::Float64 = 0.0001 # Scaling factor 

# RNAP parameters
Dp::Float64 = (0.21) # RNAP diffusion rate - "mixed-state"
αP::Float64 = (0.3525*disc) # RNAP production rate 
γP::Float64 = 0.000352 # RNAP degradation rate
k1_on::Float64 = () # RNAP binding rate from rfp module 
k1_off::Float64 = 461 # RNAP unbinding rate from rfp module 
k2_on::Float64 = () # RNAP binding rate from gfp module 
k2_off::Float64 = 461 # RNAP unbinding rate from gfp module 
Km::Float64 = () # Limiting constant for polymerase binding

# mRNA parameters
Dm::Float64 = (0.03) # mRNA diffusion rate 
γm::Float64 = 0.002 # mRNA degradation rate 
αm1::Float64 = 0.0348 # RFP transcription rate 
αm2::Float64 = 0.033 # GFP transcription rate per ribosome 

# Ribosome parameters
Dr::Float64 = (0.04) # Ribosome diffusion rate 
Drm::Float64 = (0.03) # Translating complex diffusion rate 
γr::Float64 = 0.000193 # Ribosome degradation rate 
αr::Float64 = (2.365*disc) # Ribosome production rate 
kr1_on::Float64 = 0.0541 # Ribosome binding rate (rfp) 
kr1_off::Float64 = 0.0541 # Ribosome unbinding rate (rfp)
kr2_on::Float64 = 0.0541 # Ribosome binding rate (gfp) 
kr2_off::Float64 = 0.0541 # Ribosome unbinding rate (gfp) 

# Protein parameters
αX1 = 0.06 # RFP translation rate
αX2 = 0.057 # GFP translation rate
γX = 0.0000096 # Protein degradation rate


# Gaussian approximation for the Dirac delta function
function δ(x, x0; ε=0.01) 
    return exp(-((x - x0)^2) / (2 * ε^2)) / (ε * sqrt(2 * pi))
end

# PDE system function:
function PDE_system(t_end,L,x1,x2,Dp,αP,γP,k1_on,k1_off,k2_on,k2_off,Dm,γm,αm1,αm2,Km,Dr,Drm,γr,αr,kr1_on,kr2_on,kr1_off,kr2_off,αX1,αX2,γX)

    # Define equations
    eq_pde_Pf = ∂t(Pf(t,x)) ~ Dp*∂xx(Pf(t,x)) + αP - γP*Pf(t,x) + δ(x,x1)*(-k1_on*Pf(t,x)*(1/(P1(t,x)+Km)) + k1_off*P1(t,x)) + δ(x,x2)*(-k2_on*Pf(t,x)*(1/(P2(t,x)+Km))+k2_off*P2(t,x))
    eq_ode_P1 = ∂t(P1(t,x)) ~ δ(x, x1)*((k1_on*Pf(t,x)*(1/(P1(t,x)+Km)) - k1_off*P1(t,x) - γP*P1(t,x)))
    eq_ode_P2 = ∂t(P2(t,x)) ~ δ(x, x2)*((k2_on*Pf(t,x)*(1/(P2(t,x)+Km)) - k2_off*P2(t,x) -γP*P2(t,x)))
    eq_pde_M1 = ∂t(M1(t,x)) ~ Dm*∂xx(M1(t,x)) + δ(x,x1)*(αm1*P1(t,x)) - γm*M1(t,x) + γr*R1(t,x) - kr1_on*M1(t,x)*Rf(t,x) + kr1_off*(R1(t,x))
    eq_pde_M2 = ∂t(M2(t,x)) ~ Dm*∂xx(M2(t,x)) + δ(x,x2)*(αm2*P2(t,x)) - γm*M2(t,x) + γr*R2(t,x) - kr2_on*M2(t,x)*Rf(t,x) + kr2_off*(R2(t,x))
    eq_pde_Rf = ∂t(Rf(t,x)) ~ Dr*∂xx(Rf(t,x)) + αr - γr*Rf(t,x) + (-kr1_on*M1(t,x)*Rf(t,x) + (kr1_off + γm)*(R1(t,x))) + (-kr2_on*M2(t,x)*Rf(t,x) + (kr2_off + γm)*(R2(t,x)))
    eq_pde_R1 = ∂t(R1(t,x)) ~ Drm*∂xx(R1(t,x)) + kr1_on*M1(t,x)*Rf(t,x) - kr1_off*R1(t,x) - (γr+γm)*R1(t,x)
    eq_pde_R2 = ∂t(R2(t,x)) ~ Drm*∂xx(R2(t,x)) + kr2_on*M2(t,x)*Rf(t,x) - kr2_off*R2(t,x) - (γr+γm)*R2(t,x)
    eq_ode_X1 = ∂t(X1(t,x)) ~ αX1 * R1(t,x) - γX * X1(t,x)
    eq_ode_X2 = ∂t(X2(t,x)) ~ αX2 * R2(t,x) - γX * X2(t,x)

    # Define initial and boundary conditions
    bcs = [
    ∂x(Pf(t,0))~0., ∂x(Pf(t,L))~0., ∂x(M1(t,0))~0., ∂x(M1(t,L))~0., ∂x(M2(t,0))~0., ∂x(M2(t,L))~0., 
    ∂x(Rf(t,0))~0., ∂x(Rf(t,L))~0., ∂x(R1(t,0))~0., ∂x(R1(t,L))~0., ∂x(R2(t,0))~0., ∂x(R2(t,L))~0.,
    ∂x(X1(t,0))~0., ∂x(X1(t,L))~0., ∂x(X2(t,0))~0., ∂x(X2(t,L))~0.,
    Pf(0,x)~0., P1(0,x)~0., P2(0,x)~0., M1(0,x)~0., M2(0,x)~0., Rf(0,x)~0., R1(0,x)~0., R2(0,x)~0.,X1(0,x)~0.,X2(0,x)~0.]

    # Define domains
    domains = [t ∈ (0.0,t_end), x ∈ (0.0,L)] # Boundary conditions in space and time

    # Save PDE system to a named variable
    @named genespace_problem = PDESystem([eq_pde_Pf, eq_ode_P1, eq_ode_P2, eq_pde_M1, eq_pde_M2, eq_pde_Rf, eq_pde_R1, eq_pde_R2, eq_ode_X1, eq_ode_X2],
    bcs, domains, [t,x], [Pf(t,x),P1(t,x),P2(t,x),M1(t,x),M2(t,x),Rf(t,x),R1(t,x),R2(t,x),X1(t,x),X2(t,x)])

    # Define discretization step from earlier
    dx = disc

    # Discretize system in space (and count time needed)
    discretization = MOLFiniteDifference([x=>dx],t)
    @time problem_discrete = discretize(genespace_problem, discretization)
    println("Simulation discretized")

    # Solve spatially discretized system of equations for defined timecourse
    @time solution = solve(problem_discrete, TRBDF2(), saveat=1000) # solve the PDE
    println("Model solved")
    return solution
end

# Call PDE system function with given parameters
solution = PDE_system(t_end,L,x1,x2,Dp,αP,γP,k1_on,k1_off,k2_on,k2_off,Dm,γm,αm1,αm2,Km,Dr,Drm,γr,αr,kr1_on,kr2_on,kr1_off,kr2_off,αX1,αX2,γX)

# Function for outputting results
function save_output(solution;folder_tag = "",save_array = false, show_plot = true, save_plot = false)

    # Timestamp the folder for organising / tracking results
    timestamp = Dates.format(now(), "yyyy-mm-dd_HH-MM_SS") # timestamp for folder name

    # Create a folder to save results to the specified directory
    folder_tag = homedir()*"(insert custom directory here)"*folder_tag
    while isdir(folder_tag*timestamp) # Attach a random number in case the folder already exists
        timestamp = timestamp*string(rand(001:999))
    end
    folder = folder_tag*timestamp
    mkpath(folder) # Create folder

    # Save parameters and solution as a .txt file in the folder
    if save_array
        println("Saving last time profile in folder ", folder)
        writedlm(folder * "/genespace_printout.txt",[
        # Save parameters
        "Time: $t_end s",
        "Parameters:",
        "Free RNAP diffusion constant = $Dp",
        "RNAP production rate = $αP",
        "RNAP degradation rate = $γP",
        "Plasmid 1 binding rate = $k1_on",
        "Plasmid 1 unbinding rate = $k1_off",
        "Plasmid 2 binding rate = $k2_on",
        "Plasmid 2 unbinding rate = $k2_off",
        "Plasmid 1 location = $x1",
        "Plasmid 2 location = $x2",
        "Michaelis-Menten constant for polymerase binding activity = $Km",
        "",
        "mRNA diffusion constant = $Dm",
        "mRNA degradation rate = $γm",
        "mRNA transcription rate - RFP = $αm1",
        "mRNA transcription rate - GFP = $αm2",
        "",
        "Ribosome diffusion constant = $Dr",
        "Ribosome production rate = $αr",
        "Ribosome degradation rate = $γr",
        "Ribosome binding rate to mRNA from module 1 = $kr1_on",
        "Ribosome unbinding rate from mRNA from module 1 = $kr1_off",
        "Ribosome binding rate to mRNA from module 2 = $kr2_on",
        "Ribosome unbinding rate from mRNA from module 2 = $kr2_off",
        "",
        "Translation rate - RFP = $αX1",
        "Translation rate - GFP = $αX2",
        "Protein degradation rate = $γX",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "Solutions:", # Save solutions at each spatial point and in total
        "Total free polymerase = $(trapz(solution[x], solution[Pf(t,x)][end,:]))",
        "Free polymerase distribution = $(solution[Pf(t,x)][end,:])",
        "",
        "RFP module bound polymerases distribution = $(solution[P1(t,x)][end,:])",
        "Total RFP module bound polymerases = $(trapz(solution[x],solution[P1(t,x)][end,:]))",
        "",
        "GFP module bound polymerases distribution = $(solution[P2(t,x)][end,:])",
        "Total GFP module bound polymerases = $(trapz(solution[x],solution[P2(t,x)][end,:]))",
        "",
        "Total mRNA (RFP) = $(trapz(solution[x],solution[M1(t,x)][end,:]))",
        "mRNA (RFP) distribution = $(solution[M1(t,x)][end,:])",
        "",
        "Total mRNA (GFP) = $(trapz(solution[x],solution[M2(t,x)][end,:]))",
        "mRNA (GFP) distribution = $(solution[M2(t,x)][end,:])",
        "",
        "Total free ribosomes = $(trapz(solution[x],solution[Rf(t,x)][end,:]))",
        "Free ribosome distribution = $(solution[Rf(t,x)][end,:])",
        "",
        "Total mRNA-ribosome complexes (RFP) = $(trapz(solution[x],solution[R1(t,x)][end,:]))",
        "mRNA-ribosome complex (RFP) distribution= $(solution[R1(t,x)][end,:])",
        "",
        "Total mRNA-ribosome complexes (GFP) = $(trapz(solution[x],solution[R2(t,x)][end,:]))",
        "mRNA-ribosome complex (GFP) distribution = $(solution[R2(t,x)][end,:])",
        "",
        "Total RFP = $(trapz(solution[x],solution[X1(t,x)][end,:]))",
        "RFP distribution= $(solution[X1(t,x)][end,:])",
        "",
        "Total GFP = $(trapz(solution[x],solution[X2(t,x)][end,:]))",
        "GFP distribution = $(solution[X2(t,x)][end,:])",])
    end

    if show_plot
        # Set plot defaults
        default(fontfamily="Helvetica", gridalpha=0.2, minorticks=true, framestyle=:semi, legend=:outertop, linewidth=3)
        gr() # Use the GR backend for plotting

        # Define colours for species
        red_color = colorant"#93022D"
        green_color = colorant"#9BE19D"
        blue_color = colorant"#48ACF0"
        gray_color = colorant"#63645F"
        
        # Use maximum values to set a range of y-axis limits
        maxM1 = maximum(solution[M1(t,x)][end,:])
        maxM2 = maximum(solution[M2(t,x)][end,:])
        maxR1 = maximum(solution[R1(t,x)][end,:])
        maxR2 = maximum(solution[R2(t,x)][end,:])
        maxRf = maximum(solution[Rf(t,x)][end,:])
        maxPf = maximum(solution[Pf(t,x)][end,:])
        maxP1 = maximum(solution[P1(t,x)][end,:])
        maxP2 = maximum(solution[P2(t,x)][end,:])
        maxX1 = maximum(solution[X1(t,x)][end,:])
        maxX2 = maximum(solution[X2(t,x)][end,:])
        

        # Integrate P1 and P2 to get total bound polymerases over the Dirac approximation
        P1_stst = trapz(solution[x], solution[P1(t,x)][end,:])
        P2_stst = trapz(solution[x], solution[P2(t,x)][end,:])

        for var1 in [maxPf, maxM1, maxM2, maxRf, maxR1, maxR2] # Set up a loop for different y-axis limits

            # Plot distribution profiles for all species in space
            plot(solution[x], fontfamily="Helvetica", solution[Pf(t,x)][end,:], title="Combined distribution profile for model species",
            xlabel = "Position (µm)", ylabel = "Units", legend=:outertop, legendcolumns=3, 
            titlefont=(25,"Helvetica Bold"), guidefontsize=20, legendfontsize=14, tickfontsize=18,
            label="Free RNAP",linecolor=blue_color, minorticks=true, size=(1800,1000), top_margin=2cm, bottom_margin=2cm, left_margin=2cm, right_margin=2cm)
            plot!(solution[x], solution[M1(t,x)][end,:], label="Free mRNA (rfp)", color=red_color, linestyle=:dot)
            plot!(solution[x], solution[M2(t,x)][end,:], label="Free mRNA (gfp)", color=green_color, linestyle=:dot)
            plot!(solution[x], solution[Rf(t,x)][end,:], label="Free ribosomes", color=gray_color)
            plot!(solution[x], solution[R1(t,x)][end,:], label="RFP translation complexes", color=red_color, linestyle=:dash)
            plot!(solution[x], solution[R2(t,x)][end,:], label="GFP translation complexes", color=green_color, linestyle=:dash)
            spacefig = bar!([x1],[P1_stst], bar_width=0.05, xlim=(0,L), ylim=(0,(1.5*var1)), label="rfp module bound RNAP", color=red_color, alpha=0.5)
            spacefig = bar!([x2],[P2_stst], bar_width=0.05, xlim=(0,L), label="gfp module bound RNAP", color=green_color, alpha=0.5)
            
            # Save plot as files to directory if save_plot is true, otherwise show plots
            if save_plot
                savefig(spacefig, folder*"/distributions_space ($var1).pdf")
            else
                plot(spacefig)
            end

        end
        

        # Plot individual distribution profiles for all species over time
        Pf_time = plot(solution.t, trapz(solution[x],solution[Pf(t,x)][:,:]), title="RNAP dynamics over time", label="Free RNAP", xlabel="Time (s)", ylabel="Units", color=blue_color, titlefont=("Helvetica Bold"), titlefontsize=25, legendfontsize=18, guidefontsize=20, linewidth=3, size=(1800, 1000), tickfontsize=18, top_margin=2cm, bottom_margin=2cm, left_margin=2cm, right_margin=2cm)
        P1_time = plot(solution.t, trapz(solution[x],solution[P1(t,x)][:,:]), title="rfp module bound RNAP dynamics over time", label="rfp module bound RNAP", xlabel="Time(s)", ylabel="Units", color=red_color, alpha=0.5, titlefont=("Helvetica Bold"), titlefontsize=25, legendfontsize=18, guidefontsize=20, linewidth=3, size=(1800, 1000), tickfontsize=18, top_margin=2cm, bottom_margin=2cm, left_margin=2cm, right_margin=2cm)
        P2_time = plot(solution.t, trapz(solution[x],solution[P2(t,x)][:,:]), title="gfp module bound RNAP dynamics over time", label="gfp module bound RNAP", xlabel="Time(s)", ylabel="Units", color=green_color, alpha=0.5, titlefont=("Helvetica Bold"), titlefontsize=25, legendfontsize=18, guidefontsize=20, linewidth=3, size=(1800, 1000), tickfontsize=18, top_margin=2cm, bottom_margin=2cm, left_margin=2cm, right_margin=2cm)
        M1_time = plot(solution.t, trapz(solution[x],solution[M1(t,x)][:,:]), title="Free mRNA (rfp) dynamics over time", label="mRNA (rfp)", xlabel="Time(s)", ylabel="Units", color=red_color, linestyle=:dot, titlefont=("Helvetica Bold"), titlefontsize=25, legendfontsize=18, guidefontsize=20, linewidth=3, size=(1800, 1000), tickfontsize=18, top_margin=2cm, bottom_margin=2cm, left_margin=2cm, right_margin=2cm)
        M2_time = plot(solution.t, trapz(solution[x],solution[M2(t,x)][:,:]), title="Free mRNA (gfp) dynamics over time", label="mRNA (gfp)", xlabel="Time(s)", ylabel="Units", color=green_color, linestyle=:dot, titlefont=("Helvetica Bold"), titlefontsize=25, legendfontsize=18, guidefontsize=20, linewidth=3, size=(1800, 1000), tickfontsize=18, top_margin=2cm, bottom_margin=2cm, left_margin=2cm, right_margin=2cm)
        Rf_time = plot(solution.t, trapz(solution[x],solution[Rf(t,x)][:,:]), title="Free ribosome dynamics over time", label="Free ribosomes", xlabel="Time(s)", ylabel="Units", color=gray_color, titlefont=("Helvetica Bold"), titlefontsize=25, legendfontsize=18, guidefontsize=20, linewidth=3, size=(1800, 1000), tickfontsize=18, top_margin=2cm, bottom_margin=2cm, left_margin=2cm, right_margin=2cm)
        R1_time = plot(solution.t, trapz(solution[x],solution[R1(t,x)][:,:]), title="RFP translating complex dynamics over time", label="mRNA-ribosome complexes (rfp)", xlabel="Time(s)", ylabel="Units", color=red_color, linestyle=:dash, dash_pattern="on 0.1mm off 0.05mm", titlefont=("Helvetica Bold"), titlefontsize=25, legendfontsize=18, guidefontsize=20, linewidth=3, size=(1800, 1000), tickfontsize=18, top_margin=2cm, bottom_margin=2cm, left_margin=2cm, right_margin=2cm)
        R2_time = plot(solution.t, trapz(solution[x],solution[R2(t,x)][:,:]), title="GFP translating complex dynamics over time", label="mRNA-ribosome complexes (gfp)", xlabel="Time(s)", ylabel="Units", color=green_color, linestyle=:dash, dash_pattern="on 0.1mm off 0.05mm", titlefont=("Helvetica Bold"), titlefontsize=25, legendfontsize=18, guidefontsize=20, linewidth=3, size=(1800, 1000), tickfontsize=18, top_margin=2cm, bottom_margin=2cm, left_margin=2cm, right_margin=2cm)
        RFP_time = plot(solution.t, trapz(solution[x],solution[X1(t,x)][:,:]), title="RFP dynamics over time", label="RFP", xlabel="Time(s)", ylabel="Units", color=red_color, titlefont=("Helvetica Bold"), titlefontsize=25, legendfontsize=18, guidefontsize=20, linewidth=3, size=(1800, 1000), tickfontsize=18, top_margin=2cm, bottom_margin=2cm, left_margin=2cm, right_margin=2cm)
        GFP_time = plot(solution.t, trapz(solution[x],solution[X2(t,x)][:,:]), title="GFP dynamics over time", label="GFP", xlabel="Time(s)", ylabel="Units", color=green_color, titlefont=("Helvetica Bold"), titlefontsize=25, legendfontsize=18, guidefontsize=20, linewidth=3, size=(1800, 1000), tickfontsize=18, top_margin=2cm, bottom_margin=2cm, left_margin=2cm, right_margin=2cm)
        
        # Save plot as files to directory if save_plot is true, otherwise show plots
        if save_plot  
            savefig(Pf_time, folder*"/timecourse_Pf.pdf")
            savefig(P1_time, folder*"/timecourse_P1.pdf")
            savefig(P2_time, folder*"/timecourse_P2.pdf")
            savefig(M1_time, folder*"/timecourse_M1.pdf")
            savefig(M2_time, folder*"/timecourse_M2.pdf")
            savefig(Rf_time, folder*"/timecourse_Rf.pdf")
            savefig(R1_time, folder*"/timecourse_R1.pdf")
            savefig(R2_time, folder*"/timecourse_R2.pdf")
            savefig(RFP_time, folder*"/timecourse_RFP.pdf")
            savefig(GFP_time, folder*"/timecourse_GFP.pdf")
        else
            plot(Pf_time, P1_time, P2_time, M1_time, M2_time, Rf_time, R1_time, R2_time, RFP_time, GFP_time)
        end 

        # Plot spatial distributions of individual species below

        # Plot spatial distributions of RNAPs only
        fig_pol = plot(solution[x], solution[Pf(t,x)][end,:], title="Free RNAP", xlabel="Position (µm)", ylabel="Units", color=blue_color, legend=false, bottom_margin=1cm, left_margin=0.5cm, right_margin=0.5cm, tickfontsize=20, size=(2000, 1200))
        fig_pol = bar!([x1],[P1_stst], bar_width=0.05, xlim=(0,L), ylim=(0,2*maximum(solution[Pf(t,x)][end,:])), color=red_color, alpha=0.5)
        fig_pol = bar!([x2],[P2_stst], bar_width=0.05, xlim=(0,L), ylim=(0,2*maximum(solution[Pf(t,x)][end,:])), color=green_color, alpha=0.5)

        # Plot spatial distributions of mRNAs only
        fig_mrna = plot(solution[x], [solution[M1(t,x)][end,:], solution[M2(t,x)][end,:]], title="Free mRNA", xlabel="Position (µm)", ylabel="Units", linecolor=[red_color green_color], linestyle=[:dot :dot], legend=false, bottom_margin=1cm, left_margin=0.5cm, right_margin=0.5cm, tickfontsize=20, size=(2000, 1200))
        # Determine y-axis height based on which species is higher
        if maximum(solution[M2(t,x)][end,:]) > maximum(solution[M1(t,x)][end,:])
            fig_mrna = bar!([x1],[P1_stst], bar_width=0.05, xlim=(0,L), ylim=(0,1.5*maximum(solution[M2(t,x)][end,:])), color=red_color, alpha=0.5)
            fig_mrna = bar!([x2],[P2_stst], bar_width=0.05, xlim=(0,L), ylim=(0,1.5*maximum(solution[M2(t,x)][end,:])), color=green_color, alpha=0.5)
        else
            fig_mrna = bar!([x1],[P1_stst], bar_width=0.05, xlim=(0,L), ylim=(0,1.5*maximum(solution[M1(t,x)][end,:])), color=red_color, alpha=0.5)
            fig_mrna = bar!([x2],[P2_stst], bar_width=0.05, xlim=(0,L), ylim=(0,1.5*maximum(solution[M1(t,x)][end,:])), color=green_color, alpha=0.5)
        end
        
        # Plot spatial distributions of free ribosomes only
        fig_rbsfree = plot(solution[x], solution[Rf(t,x)][end,:], title="Free ribosomes", xlabel="Position (µm)", ylabel="Units", color=gray_color, legend=false, bottom_margin=1cm, left_margin=0.5cm, right_margin=0.5cm, tickfontsize=20, size=(2000, 1200))
        fig_rbsfree = bar!([x1],[P1_stst], bar_width=0.05, xlim=(0,L), ylim=(0,2*maximum(solution[Rf(t,x)][end,:])), color=red_color, alpha=0.5)
        fig_rbsfree = bar!([x2],[P2_stst], bar_width=0.05, xlim=(0,L), ylim=(0,2*maximum(solution[Rf(t,x)][end,:])), color=green_color, alpha=0.5)
        
        # Plot spatial distributions of translation complexes only
        fig_rbsbound = plot(solution[x], [solution[R1(t,x)][end,:], solution[R2(t,x)][end,:]], title="Translation complexes", xlabel="Position (µm)", ylabel="Units", linecolor=[red_color green_color], linestyle=[:dash :dash], legend=false, bottom_margin=1cm, left_margin=0.5cm, right_margin=0.5cm, tickfontsize=20, size=(2000, 1200))
        if maximum(solution[R2(t,x)][end,:]) > maximum(solution[R1(t,x)][end,:])
            fig_rbsbound = bar!([x1],[P1_stst], bar_width=0.05, xlim=(0,L), ylim=(0,1.5*maximum(solution[R2(t,x)][end,:])), color=red_color, alpha=0.5)
            fig_rbsbound = bar!([x2],[P2_stst], bar_width=0.05, xlim=(0,L), ylim=(0,1.5*maximum(solution[R2(t,x)][end,:])), color=green_color, alpha=0.5)
        else
            fig_rbsbound = bar!([x1],[P1_stst], bar_width=0.05, xlim=(0,L), ylim=(0,1.5*maximum(solution[R1(t,x)][end,:])), color=red_color, alpha=0.5)
            fig_rbsbound = bar!([x2],[P2_stst], bar_width=0.05, xlim=(0,L), ylim=(0,1.5*maximum(solution[R1(t,x)][end,:])), color=green_color, alpha=0.5)
        end

        # Create a plot for the legend
        legend = plot([0 0 0 0 0 0], showaxis = false, grid = false, label = ["Free RNAP" "Free mRNA (rfp)" "Free mRNA (gfp)" "Free ribosomes" "RFP translating complexes" "GFP translating complexes"], 
        color= [blue_color red_color green_color gray_color red_color green_color], linestyle = [:solid :dot :dot :solid :dash :dash],size=(0,0))
        legend = bar!([0],[0], bar_width=0.05, color=red_color, label="Bound RNAP (rfp)", alpha=0.5)
        legend = bar!([0],[0], bar_width=0.05, color=green_color, label="Bound RNAP (gfp)", alpha=0.5)

        # Combine all plots and the legend into a single figure
        combined = plot(fig_pol, fig_mrna, fig_rbsfree, fig_rbsbound, legend, layout=@layout([[2,2]; E]), size=(2200,2200),
        titlefontfamily="Helvetica Bold", titlefontsize=25, guidefontsize=20, guidefontfamily="Helvetica Bold", legendfontsize=17, 
        legendcolumns=4, left_margin=2cm, right_margin=2cm)
        
        # Save the combined indivudual distributions or show it
        if save_plot
            savefig(combined, folder*"/distributions_individual.pdf")
        else
            plot(combined)
        end
    end
end

# Execute the save_output function
@time save_output(solution;save_array = true, save_plot = true)
